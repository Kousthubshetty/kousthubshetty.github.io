//fcfs
#include <stdio.h>
  void main()
  {
  
   int i,n, btime [10], wtime [10], turntime[10], comptime [10];
  
  int totturn=0,totwait=0, arvltime[10];
  float avgturn, avgwait ;
  
  printf("Enter the no of process");
  scanf("%d",&n);
  
  printf("Enter arrival and burst time I process ");
  for(i=0;i<n;i++)
  {
  scanf("%d %d",&arvltime[i],&btime[i]);
  }
  wtime[0] = 0;
  comptime[0]= btime [0];
  turntime[0] = btime[0];
  totturn = turntime[0];
  for(i=1; i<n; i++)
  {
      comptime[i]= comptime[i-1] + btime[i];
      turntime[i] = comptime[i] - arvltime[i];
      wtime[i]  =  turntime[i] - btime[i];
      totturn += turntime[i];
      totwait += wtime[i] ;
  }
  printf("PID AT BT CT  TAT WT\n");
  
  for(i=0; i<n; i++)
      printf("%d %d %d %d %d %d\n",i+1,arvltime[i],btime[i],comptime[i],turntime[i],wtime[i]);
  
  
  avgturn = (float)totturn/n;
  avgwait = (float)totwait/n;
  printf("Avg Turnaround time: %f",avgturn);
  printf("Avg Waiting time: %f",avgwait);
  }
  
  //rr
#include<stdio.h>
int main()
{

  int count,j,n,time=0,remain,flag=0,time_quantum;
  int wait_time=0,turnaround_time=0,bt[10],rt[10],ct[10],tat[10],wt[10],c;
  printf("Enter Total Process:\t ");
  scanf("%d",&n);
  remain=n;
  for(count=0;count<n;count++)
  {
    printf("Enter Burst Time for Process Process Number %d :",count+1);
    scanf("%d",&bt[count]);
    rt[count]=bt[count];
  }
  printf("Enter Time Quantum:\t");
  scanf("%d",&time_quantum);

  c = n;
  while(c>0)
  {
      for(count =0;count<n;count++)
      {

        if(rt[count]<=time_quantum && rt[count]>0)
        {
          time+=rt[count];
          printf("%d ",time);
          rt[count]=0;
          ct[count] = tat[count] =time;
          c--;
          wt[count] = tat[count] - bt[count];
          turnaround_time += tat[count];
          wait_time += wt[count];
        }
        else if(rt[count]>0)
        {
          rt[count]-=time_quantum;
          time+=time_quantum;
        }
      }
  }
  printf("\n\nProcess\tBurst time\tCompletion Time\tTurnaround Time|Waiting Time\n\n");
  for(count =0;count<n;count++)
  {
      printf("\n%d  %d  %d  %d  %d\n",count+1,bt[count],ct[count],tat[count],wt[count]);
  }

  printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n);
  printf("Avg Turnaround Time = %f",turnaround_time*1.0/n);

  return 0;
}

//priority
#include<stdio.h>
int main()
{
    int bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat;
    printf("Enter Total Number of Process:");
    scanf("%d",&n);

    printf("\nEnter Burst Time and Priority\n");
    for(i=0;i<n;i++)
    {
        printf("\nP[%d]\n",i+1);
        printf("Burst Time:");
        scanf("%d",&bt[i]);
        printf("Priority:");
        scanf("%d",&pr[i]);
        p[i]=i+1;
    }

    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }

        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;

        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;

        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }

    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
        wt[i]+=bt[j];

        total+=wt[i];
    }

    avg_wt=total/n;
    total=0;

    printf("\nProcess\t    Burst Time   \tPriority    \t    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];
        total+=tat[i];
        printf("\nP[%d]\t\t  %d\t\t     %d\t\t    %d\t\t\t%d",p[i],bt[i],pr[i],wt[i],tat[i]);
    }

    avg_tat=total/n;
    printf("\n\nAverage Waiting Time=%d",avg_wt);
    printf("\nAverage Turnaround Time=%d\n",avg_tat);

return 0;
}


//fifo

#include<stdio.h>
int main()
{
    int n,frame,hit=0,miss=0,pos=0,flag,i,j;
    printf("Enter the number of pages:");
    scanf("%d",&frame);
    int ref[frame];
    printf("Enter the reference string:");
    for(i=0;i<frame;i++)
        scanf("%d",&ref[i]);
    printf("Enter the frame size:");
    scanf("%d",&n);
    int page[n];
    for(i=0;i<n;i++){
        page[i]=ref[i];
        printf("%d\t",page[i]);
    }
        printf("\n");
    for(i=3;i<frame;i++){
        for(j=0;j<n;j++){
            flag=0;
            if(ref[i]==page[j]){
                hit++;
                flag=1;
                break;
            }
        }
        if(flag==0){
            page[pos]=ref[i];
            if(pos<n)
                pos++;
            else
                pos=0;
        }
        for(j=0;j<n;j++)
        printf("%d\t",page[j]);
        printf("\n");
    }
    miss = frame - hit;
    printf("\nTotal page faults %d",miss);
    printf("\nTotal no of hits:%d",hit);
}


//optimal

#include<stdio.h>
int main()
{
    int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, pos, max, faults = 0;
    printf("Enter number of frames: ");
    scanf("%d", &no_of_frames);

    printf("Enter number of pages: ");
    scanf("%d", &no_of_pages);

    printf("Enter page reference string: ");

    for(i = 0; i < no_of_pages; i++){
        scanf("%d", &pages[i]);
    }

    for(i = 0; i < no_of_frames; i++){
        frames[i] = -1;
    }

    for(i = 0; i < no_of_pages; i++){
        flag1 = flag2 = 0;

        for(j = 0; j < no_of_frames; j++){
            if(frames[j] == pages[i]){
                   flag1 = flag2 = 1;
                   break;
               }
        }

        if(flag1 == 0){
            for(j = 0; j < no_of_frames; j++){
                if(frames[j] == -1){
                    faults++;
                    frames[j] = pages[i];
                    flag2 = 1;
                    break;
                }
            }
        }

        if(flag2 == 0){
         flag3 =0;

            for(j = 0; j < no_of_frames; j++){
             temp[j] = -1;

             for(k = i + 1; k < no_of_pages; k++){
             if(frames[j] == pages[k]){
             temp[j] = k;
             break;
             }
             }
            }

            for(j = 0; j < no_of_frames; j++){
             if(temp[j] == -1){
             pos = j;
             flag3 = 1;
             break;
             }
            }

            if(flag3 ==0){
             max = temp[0];
             pos = 0;

             for(j = 1; j < no_of_frames; j++){
             if(temp[j] > max){
             max = temp[j];
             pos = j;
             }
             }
            }
frames[pos] = pages[i];
faults++;
        }

        printf("\n");

        for(j = 0; j < no_of_frames; j++){
            printf("%d\t", frames[j]);
        }
    }

    printf("\n\nTotal Page Faults = %d", faults);
    printf("\nHit=%d",no_of_pages-faults);

    return 0;
}


//LRU

#include<stdio.h>

int findLRU(int time[], int n){
int i, minimum = time[0], pos = 0;

for(i = 1; i < n; i++){
if(time[i] < minimum){
minimum = time[i];
pos = i;
}
}
return pos;
}

int main()
{
    int no_of_frames, no_of_pages, frames[10], pages[30], counter = 0, time[10], flag1, flag2, i, j, pos, faults = 0;
printf("Enter number of frames: ");
scanf("%d", &no_of_frames);
printf("Enter number of pages: ");
scanf("%d", &no_of_pages);
printf("Enter reference string: ");
    for(i = 0; i < no_of_pages; i++){
     scanf("%d", &pages[i]);
    }

for(i = 0; i < no_of_frames; i++){
     frames[i] = -1;
    }

    for(i = 0; i < no_of_pages; i++){
     flag1 = flag2 = 0;

     for(j = 0; j < no_of_frames; j++){
     if(frames[j] == pages[i]){
     counter++;
     time[j] = counter;
   flag1 = flag2 = 1;
   break;
   }
     }

     if(flag1 == 0){
for(j = 0; j < no_of_frames; j++){
     if(frames[j] == -1){
     counter++;
     faults++;
     frames[j] = pages[i];
     time[j] = counter;
     flag2 = 1;
     break;
     }
     }
     }

     if(flag2 == 0){
     pos = findLRU(time, no_of_frames);
     counter++;
     faults++;
     frames[pos] = pages[i];
     time[pos] = counter;
     }

     printf("\n");
     for(j = 0; j < no_of_frames; j++){
     printf("%d\t", frames[j]);
     }
}
printf("\n\nTotal Page Faults = %d", faults);
printf("\nHit=%d",counter-faults);

    return 0;
}


//bankers
#include<stdio.h>
#include<stdlib.h>
int n=5,m=4,i,j;
int cnt=0,all[10][10],max[10][10],need[10][10],avail[10],work[10];
struct process
{
    char process[10];
    int flag;
}p[10];

void input()
{
    printf("Enter the total number of processes: \n");
    scanf("%d",&n);
    printf("\nEnter the number of resources: \n");
    scanf("%d",&m);
    printf("Enter the allocation matrix: \n");
    for(i=0; i<n; i++)
    {
        for(j=0;j<m; j++)
        {
            scanf("%d",&all[i][j]);
        }
    }
    printf("Enter the max matrix: \n");
    for(i=0; i<n; i++)
    {
        for(j=0;j<m; j++)
        {
            scanf("%d",&max[i][j]);
        }
    }
    //printf("Enter the need matrix\n");
    for(i=0; i<n; i++)
    {
        for(j=0;j<m; j++)
        {
            //scanf("%d",&need[i][j]);
            need[i][j] = max[i][j]-all[i][j];
        }
    }
    printf("Enter the initial number of resources available: ");
    for(i=0; i<m; i++)
    {
        scanf("%d",&avail[i]);
    }
}

void safeSeq()
{
    int sseq[10], ss=0, chk=0, chki=0;
    for(i=0;i<m; i++)
        work[i] = avail[i];
    for(i=0; i<n; i++)
        p[i].flag = 0;
    while(cnt != n)
    {
        for(i=0; i<n; i++)
        {
            chk=0;
            for(j=0;j<m;j++)
            {
                if(p[i].flag == 0)
                {
                    if(need[i][j] <= work[j]){
                        chk++;
                    }

                }
                if(chk == m)
                {
                    for(j=0; j<m; j++)
                    {
                        work[j] = work[j] + all[i][j];
                        p[i].flag = 1;

                    }
                    sseq[ss] = i+1;
                    ss++;
                    cnt++;
                }
            }
        }
    }
    for(i=0; i<n; i++)
    {
        if(p[i].flag == 1)
            chki++;
    }
    if(chki >= n)
    {
        printf("System is in safe state\n");
        printf("<");
        for(i=0;i<n; i++)
        {
            printf("p[%d], ",sseq[i]);

        }

        printf(">\n");
    }
    else
    {
        printf("System is not in a safe state");
    }
}

void print()
{
    printf("Process:%d\n",n);
    printf("Number of resources: %d\n",m);
    printf("\nProcess\tMax\tAlloc\tNeed\n");
    for(i=0; i<n; i++)
    {
        printf("\n%d",i+1);
        printf("\t");
        for(j=0; j<m; j++)
            printf("%d",max[i][j]);
        printf("\t");
        for(j=0; j<m; j++)
            printf("%d",all[i][j]);
        printf("\t");
        for(j=0; j<m; j++)
        {
            printf("%d",need[i][j]);
        }
    }
    printf("\n\nAvailable\n");
    for(j=0; j<m; j++)
        printf("%d",avail[j]);
    printf("\n");
}

int main()
{

        input();
        print();
        safeSeq();
    return 0;
}
